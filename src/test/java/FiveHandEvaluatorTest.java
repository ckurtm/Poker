import com.peirr.poker.models.Card;
import com.peirr.poker.hands.HandCategory;
import com.peirr.poker.hands.variant.FiveHandEvaluator;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'kurt' at '2016/02/08 22:11 PM' with Gradle 2.10
 *
 * @author kurt, @date 2016/02/08 22:11 PM
 */
public class FiveHandEvaluatorTest {


    FiveHandEvaluator evaluator;

    @Before
    public void setUp() {
        evaluator = new FiveHandEvaluator();
    }


    @Test
    public void canDetectStraightFlushHand() {
        //Straight flush
        Card[] straightFlush = new Card[]{
                new Card(Card.CLUB, Card.JACK),
                new Card(Card.CLUB, 10),
                new Card(Card.CLUB, 9),
                new Card(Card.CLUB, 8),
                new Card(Card.CLUB, 7)
        };

        assertTrue(evaluator.handCategory(straightFlush) == HandCategory.STRAIGHT_FLUSH);

    }


    @Test
    public void canDetectFourOfAKindHand() {

        //Four of a kind
        Card[] fourOfaKind = new Card[]{
                new Card(Card.CLUB, 6),
                new Card(Card.DIAMOND, 6),
                new Card(Card.HEART, 6),
                new Card(Card.SPADE, 6),
                new Card(Card.HEART, Card.JACK)
        };

        assertTrue(evaluator.handCategory(fourOfaKind) == HandCategory.FOUR_OF_A_KIND);

    }


    @Test
    public void canDetectFullHouseHand() {

        //Full House
        Card[] fullHouse = new Card[]{
                new Card(Card.SPADE, 5),
                new Card(Card.CLUB, 5),
                new Card(Card.DIAMOND, 5),
                new Card(Card.CLUB, Card.KING),
                new Card(Card.HEART, Card.KING)
        };
        assertTrue(evaluator.handCategory(fullHouse) == HandCategory.FULL_HOUSE);

    }


    @Test
    public void canDetectFlushHand() {

        //Flush
        Card[] flush = new Card[]{
                new Card(Card.DIAMOND, Card.JACK),
                new Card(Card.DIAMOND, 10),
                new Card(Card.DIAMOND, 8),
                new Card(Card.DIAMOND, 7),
                new Card(Card.DIAMOND, 2)
        };

        assertTrue(evaluator.handCategory(flush) == HandCategory.FLUSH);


    }


    @Test
    public void canDetectStraightHand() {

        //Straight
        Card[] straight = new Card[]{
                new Card(Card.DIAMOND, Card.KING),
                new Card(Card.CLUB, Card.QUEEN),
                new Card(Card.SPADE, Card.JACK),
                new Card(Card.HEART, 10),
                new Card(Card.SPADE, 9)
        };

        assertTrue(evaluator.handCategory(straight) == HandCategory.STRAIGHT);

    }


    @Test
    public void canDetectThreeOfAKindHand() {

        //Three of a kind
        Card[] threeOfkind1 = new Card[]{
                new Card(Card.CLUB, 3),
                new Card(Card.DIAMOND, 7),
                new Card(Card.HEART, 7),
                new Card(Card.SPADE, 7),
                new Card(Card.HEART, Card.KING)
        };

        assertTrue(evaluator.handCategory(threeOfkind1) == HandCategory.THREE_OF_A_KIND);

        //Three of a Kind
        Card[] threeOfkind2 = new Card[]{
                new Card(Card.CLUB, Card.ACE),
                new Card(Card.SPADE, Card.ACE),
                new Card(Card.HEART, Card.ACE),
                new Card(Card.DIAMOND, Card.QUEEN),
                new Card(Card.SPADE, 2)
        };

        assertTrue(evaluator.handCategory(threeOfkind2) == HandCategory.THREE_OF_A_KIND);

    }


    @Test
    public void canDetectTwoPairHand() {

        //Two pair
        Card[] twoPair = new Card[]{
                new Card(Card.HEART, Card.QUEEN),
                new Card(Card.SPADE, Card.QUEEN),
                new Card(Card.HEART, 8),
                new Card(Card.SPADE, 8),
                new Card(Card.CLUB, 2)
        };

        assertTrue(evaluator.handCategory(twoPair) == HandCategory.TWO_PAIR);

    }


    @Test
    public void canDetectOnePairHand() {
        //One pair
        Card[] onePair = new Card[]{
                new Card(Card.SPADE, 7),
                new Card(Card.HEART, 7),
                new Card(Card.SPADE, Card.KING),
                new Card(Card.CLUB, 4),
                new Card(Card.SPADE, 3)
        };

        assertTrue(evaluator.handCategory(onePair) == HandCategory.ONE_PAIR);

    }


    @Test
    public void canDetectHighCardHand() {
        //high card
        Card[] highCard = new Card[]{
                new Card(Card.DIAMOND, Card.ACE),
                new Card(Card.SPADE, 10),
                new Card(Card.HEART, 9),
                new Card(Card.DIAMOND, 4),
                new Card(Card.CLUB, 3)
        };

        assertTrue(evaluator.handCategory(highCard) == HandCategory.HIGH_CARD);

    }

}
